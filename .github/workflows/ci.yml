name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: "1.22"

jobs:
  test:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ["1.22"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Clean test cache
      run: go clean -testcache

    - name: Run unit tests
      run: go test -v ./...

  race:
    name: Race Detection
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: ["1.22"]  # Only run race detection on latest Go version

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Clean test cache
      run: go clean -testcache

    - name: Run race detection tests
      run: go test -race ./...

  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Clean test cache
      run: go clean -testcache

    - name: Run tests with coverage
      run: go test -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      run: |
        mkdir -p build
        go build -o build/brew ./cmd/brew
        ./build/brew --version

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: homebrew-go-${{ matrix.os }}
        path: build/brew*

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install Security Tools
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        go install golang.org/x/vuln/cmd/govulncheck@latest

    - name: Run Gosec Security Scanner
      run: |
        echo "üîç Running Gosec security scanner..."
        gosec -fmt text ./... || echo "‚ö†Ô∏è  Gosec found potential security issues (non-blocking)"
        echo "‚úÖ Gosec scan completed"
      continue-on-error: true

    - name: Run Go Vulnerability Scanner
      run: |
        echo "üîç Running govulncheck vulnerability scanner..."
        govulncheck ./... || echo "‚ö†Ô∏è  Govulncheck found potential vulnerabilities (non-blocking)"
        echo "‚úÖ Govulncheck scan completed"
      continue-on-error: true

    - name: Security Scan Summary
      run: |
        echo "üõ°Ô∏è  Security scans completed successfully"
        echo "‚ÑπÔ∏è   Check the logs above for any security findings"
        echo "‚ÑπÔ∏è   Security scans are non-blocking and for informational purposes"
        echo "‚ÑπÔ∏è   Using gosec for code security and govulncheck for vulnerability scanning"

  # Summary job for status checks
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [test, race, coverage, lint, build, security]
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "üîç Checking CI job results..."
        echo "Unit Tests: ${{ needs.test.result }}"
        echo "Race Detection: ${{ needs.race.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Security: ${{ needs.security.result }}"

        # Check if any required job failed (security is optional)
        if [[ "${{ needs.test.result }}" != "success" ]] || \
           [[ "${{ needs.race.result }}" != "success" ]] || \
           [[ "${{ needs.coverage.result }}" != "success" ]] || \
           [[ "${{ needs.lint.result }}" != "success" ]] || \
           [[ "${{ needs.build.result }}" != "success" ]]; then
          echo "‚ùå CI pipeline failed"
          exit 1
        fi

        echo "‚úÖ All CI checks passed successfully!"
