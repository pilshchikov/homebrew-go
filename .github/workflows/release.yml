name: Release

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  GO_VERSION: "1.22"

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      discussions: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Generate version
      id: version
      run: |
        # Generate semantic version in format vMAJOR.MINOR.PATCH
        YEAR=$(date +%Y)
        MONTH=$(date +%-m)  # No leading zero
        DAY=$(date +%d)
        BUILD_ID=${{ github.run_number }}
        
        # Convert to semver: v<year-2024>.<month><day>.<build_id>
        MAJOR=$((YEAR - 2024))  # Start from 1 for 2025
        MINOR=$((MONTH * 100 + DAY))  # e.g., 627 for June 27th
        PATCH=$BUILD_ID
        VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Generated semantic version: $VERSION"

    - name: Clean test cache
      run: go clean -testcache

    - name: Run tests
      run: go test -v ./...

    - name: Create release tag
      run: |
        VERSION=${{ steps.version.outputs.version }}
        echo "Creating tag: $VERSION"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "$VERSION" -m "Release $VERSION - $(date '+%Y-%m-%d %H:%M:%S UTC')"
        git push origin "$VERSION"

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v6
      with:
        version: '~> v2'
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update release as pre-release
      if: github.event.inputs.prerelease == 'true'
      run: |
        VERSION=${{ steps.version.outputs.version }}
        gh release edit "$VERSION" --prerelease
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

